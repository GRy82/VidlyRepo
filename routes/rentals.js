//mongoose and mongoDB "under the hood" info at bottom of File.

const express = require('express');
const router = express.Router();
const Fawn = require('fawn');
const mongoose = require('mongoose');
const { Rental, validate } = require('../models/rental');
const {Customer} = require('../models/customer');
const {Movie} = require('../models/movie');

Fawn.init(mongoose);

router.get('/', async (req, res) => {
    const rentals = await Rental.find().sort('-dateOut');

    if(!rentals) return res.status(404).send('A rental could not be found with the id provided.');

    res.send(rentals);
});

router.get('/:id', async (req, res) => {
    const rental = await Rental.findById(req.params.id);

    res.send(rental);
});

router.post('/', async (req, res) => {
    const result = validate(req.body);
    if(result.error) return res.status(400).send(result.error.details[0].message);

    const movie = await Movie.findById(req.body.movieId);
    if(!movie) return res.status(404).send('A movie could not be found with the id provided.');

    const customer = await Customer.findById(req.body.customerId);
    if(!customer) return res.status(404).send('A customer could not be found with the id provided.');

    if(movie.numberInStock === 0) return res.status(400).send('Movie not in stock');

    let rental = new Rental({
        customer: {
            _id: customer._id,
            name: customer.name,
            phone: customer.phone
        },
        movie: {
            _id: movie._id,
            title: movie.title,
            dailyRentalRate: movie.dailyRentalRate
        }
    });
    // rental = await rental.save();
    // movie.numberInStock--;
    // movie.save();

    // res.send(rental);

    try{
        new Fawn.Task()
            .save('rentals', rental)
            .update('movies', { _id: movie._id }, {
                $inc: { numberInStock: -1 }
            })
            .run();

        res.send(rental);
    }
    catch{
        res.status(500).send('Something failed.');
    }

});

module.exports = router;

//mongodb objectid is generated by mongodb driver.
//mongodb objectid is 24 characters.
//every two chars in a byte.
//12 bytes identify a document.
    //first 4 bytes are a time stamp(8 characters)
        //Dont need separate property for timestamp.
        //Can sort by timestamp using objectid.
    //next 3 bytes are machine identifiers.
    //next 2 bytes are process identifiers.
    //last 3 bytes are a counter for different documents created at... 
        //...the same given time, on same machine, with same process.

    //3 bytes can have 16 mil different numbers. Therefore you need 16 mil..
        //..transactions at the same time in same machine with same process...
        // to get a duplicate id#. Practically impossible. 


//objectid system is highly scalable.
//Driver communicates with MongoDB.  
    //Because driver generates id, you do not need to wait on mongodb
    //Can have several instances of MongoDB, and id will still be unique.
    //Other databases increment Id's, and thus can create duplicate id's.
//Mongoose is abstraction over MongoDB Driver
    //Mongoose can be used to generate ObjectID directly.  